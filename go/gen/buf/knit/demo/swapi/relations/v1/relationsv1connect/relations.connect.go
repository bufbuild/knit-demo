// Copyright 2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: buf/knit/demo/swapi/relations/v1/relations.proto

package relationsv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/bufbuild/knit-demo/go/gen/buf/knit/demo/swapi/relations/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// FilmResolverServiceName is the fully-qualified name of the FilmResolverService service.
	FilmResolverServiceName = "buf.knit.demo.swapi.relations.v1.FilmResolverService"
	// PersonResolverServiceName is the fully-qualified name of the PersonResolverService service.
	PersonResolverServiceName = "buf.knit.demo.swapi.relations.v1.PersonResolverService"
	// PlanetResolverServiceName is the fully-qualified name of the PlanetResolverService service.
	PlanetResolverServiceName = "buf.knit.demo.swapi.relations.v1.PlanetResolverService"
	// SpeciesResolverServiceName is the fully-qualified name of the SpeciesResolverService service.
	SpeciesResolverServiceName = "buf.knit.demo.swapi.relations.v1.SpeciesResolverService"
	// StarshipResolverServiceName is the fully-qualified name of the StarshipResolverService service.
	StarshipResolverServiceName = "buf.knit.demo.swapi.relations.v1.StarshipResolverService"
	// VehicleResolverServiceName is the fully-qualified name of the VehicleResolverService service.
	VehicleResolverServiceName = "buf.knit.demo.swapi.relations.v1.VehicleResolverService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FilmResolverServiceGetPersonFilmsProcedure is the fully-qualified name of the
	// FilmResolverService's GetPersonFilms RPC.
	FilmResolverServiceGetPersonFilmsProcedure = "/buf.knit.demo.swapi.relations.v1.FilmResolverService/GetPersonFilms"
	// FilmResolverServiceGetSpeciesFilmsProcedure is the fully-qualified name of the
	// FilmResolverService's GetSpeciesFilms RPC.
	FilmResolverServiceGetSpeciesFilmsProcedure = "/buf.knit.demo.swapi.relations.v1.FilmResolverService/GetSpeciesFilms"
	// FilmResolverServiceGetPlanetFilmsProcedure is the fully-qualified name of the
	// FilmResolverService's GetPlanetFilms RPC.
	FilmResolverServiceGetPlanetFilmsProcedure = "/buf.knit.demo.swapi.relations.v1.FilmResolverService/GetPlanetFilms"
	// FilmResolverServiceGetStarshipFilmsProcedure is the fully-qualified name of the
	// FilmResolverService's GetStarshipFilms RPC.
	FilmResolverServiceGetStarshipFilmsProcedure = "/buf.knit.demo.swapi.relations.v1.FilmResolverService/GetStarshipFilms"
	// FilmResolverServiceGetVehicleFilmsProcedure is the fully-qualified name of the
	// FilmResolverService's GetVehicleFilms RPC.
	FilmResolverServiceGetVehicleFilmsProcedure = "/buf.knit.demo.swapi.relations.v1.FilmResolverService/GetVehicleFilms"
	// PersonResolverServiceGetFilmCharactersProcedure is the fully-qualified name of the
	// PersonResolverService's GetFilmCharacters RPC.
	PersonResolverServiceGetFilmCharactersProcedure = "/buf.knit.demo.swapi.relations.v1.PersonResolverService/GetFilmCharacters"
	// PersonResolverServiceGetSpeciesCharactersProcedure is the fully-qualified name of the
	// PersonResolverService's GetSpeciesCharacters RPC.
	PersonResolverServiceGetSpeciesCharactersProcedure = "/buf.knit.demo.swapi.relations.v1.PersonResolverService/GetSpeciesCharacters"
	// PersonResolverServiceGetPlanetResidentsProcedure is the fully-qualified name of the
	// PersonResolverService's GetPlanetResidents RPC.
	PersonResolverServiceGetPlanetResidentsProcedure = "/buf.knit.demo.swapi.relations.v1.PersonResolverService/GetPlanetResidents"
	// PersonResolverServiceGetStarshipPilotsProcedure is the fully-qualified name of the
	// PersonResolverService's GetStarshipPilots RPC.
	PersonResolverServiceGetStarshipPilotsProcedure = "/buf.knit.demo.swapi.relations.v1.PersonResolverService/GetStarshipPilots"
	// PersonResolverServiceGetVehiclePilotsProcedure is the fully-qualified name of the
	// PersonResolverService's GetVehiclePilots RPC.
	PersonResolverServiceGetVehiclePilotsProcedure = "/buf.knit.demo.swapi.relations.v1.PersonResolverService/GetVehiclePilots"
	// PlanetResolverServiceGetFilmPlanetsProcedure is the fully-qualified name of the
	// PlanetResolverService's GetFilmPlanets RPC.
	PlanetResolverServiceGetFilmPlanetsProcedure = "/buf.knit.demo.swapi.relations.v1.PlanetResolverService/GetFilmPlanets"
	// PlanetResolverServiceGetPersonHomeworldProcedure is the fully-qualified name of the
	// PlanetResolverService's GetPersonHomeworld RPC.
	PlanetResolverServiceGetPersonHomeworldProcedure = "/buf.knit.demo.swapi.relations.v1.PlanetResolverService/GetPersonHomeworld"
	// PlanetResolverServiceGetSpeciesHomeworldProcedure is the fully-qualified name of the
	// PlanetResolverService's GetSpeciesHomeworld RPC.
	PlanetResolverServiceGetSpeciesHomeworldProcedure = "/buf.knit.demo.swapi.relations.v1.PlanetResolverService/GetSpeciesHomeworld"
	// SpeciesResolverServiceGetFilmSpeciesProcedure is the fully-qualified name of the
	// SpeciesResolverService's GetFilmSpecies RPC.
	SpeciesResolverServiceGetFilmSpeciesProcedure = "/buf.knit.demo.swapi.relations.v1.SpeciesResolverService/GetFilmSpecies"
	// SpeciesResolverServiceGetPersonSpeciesProcedure is the fully-qualified name of the
	// SpeciesResolverService's GetPersonSpecies RPC.
	SpeciesResolverServiceGetPersonSpeciesProcedure = "/buf.knit.demo.swapi.relations.v1.SpeciesResolverService/GetPersonSpecies"
	// StarshipResolverServiceGetFilmStarshipsProcedure is the fully-qualified name of the
	// StarshipResolverService's GetFilmStarships RPC.
	StarshipResolverServiceGetFilmStarshipsProcedure = "/buf.knit.demo.swapi.relations.v1.StarshipResolverService/GetFilmStarships"
	// StarshipResolverServiceGetPersonStarshipsProcedure is the fully-qualified name of the
	// StarshipResolverService's GetPersonStarships RPC.
	StarshipResolverServiceGetPersonStarshipsProcedure = "/buf.knit.demo.swapi.relations.v1.StarshipResolverService/GetPersonStarships"
	// VehicleResolverServiceGetFilmVehiclesProcedure is the fully-qualified name of the
	// VehicleResolverService's GetFilmVehicles RPC.
	VehicleResolverServiceGetFilmVehiclesProcedure = "/buf.knit.demo.swapi.relations.v1.VehicleResolverService/GetFilmVehicles"
	// VehicleResolverServiceGetPersonVehiclesProcedure is the fully-qualified name of the
	// VehicleResolverService's GetPersonVehicles RPC.
	VehicleResolverServiceGetPersonVehiclesProcedure = "/buf.knit.demo.swapi.relations.v1.VehicleResolverService/GetPersonVehicles"
)

// FilmResolverServiceClient is a client for the
// buf.knit.demo.swapi.relations.v1.FilmResolverService service.
type FilmResolverServiceClient interface {
	GetPersonFilms(context.Context, *connect_go.Request[v1.GetPersonRelationsRequest]) (*connect_go.Response[v1.GetFilmsResponse], error)
	GetSpeciesFilms(context.Context, *connect_go.Request[v1.GetSpeciesRelationsRequest]) (*connect_go.Response[v1.GetFilmsResponse], error)
	GetPlanetFilms(context.Context, *connect_go.Request[v1.GetPlanetRelationsRequest]) (*connect_go.Response[v1.GetFilmsResponse], error)
	GetStarshipFilms(context.Context, *connect_go.Request[v1.GetStarshipRelationsRequest]) (*connect_go.Response[v1.GetFilmsResponse], error)
	GetVehicleFilms(context.Context, *connect_go.Request[v1.GetVehicleRelationsRequest]) (*connect_go.Response[v1.GetFilmsResponse], error)
}

// NewFilmResolverServiceClient constructs a client for the
// buf.knit.demo.swapi.relations.v1.FilmResolverService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFilmResolverServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) FilmResolverServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &filmResolverServiceClient{
		getPersonFilms: connect_go.NewClient[v1.GetPersonRelationsRequest, v1.GetFilmsResponse](
			httpClient,
			baseURL+FilmResolverServiceGetPersonFilmsProcedure,
			opts...,
		),
		getSpeciesFilms: connect_go.NewClient[v1.GetSpeciesRelationsRequest, v1.GetFilmsResponse](
			httpClient,
			baseURL+FilmResolverServiceGetSpeciesFilmsProcedure,
			opts...,
		),
		getPlanetFilms: connect_go.NewClient[v1.GetPlanetRelationsRequest, v1.GetFilmsResponse](
			httpClient,
			baseURL+FilmResolverServiceGetPlanetFilmsProcedure,
			opts...,
		),
		getStarshipFilms: connect_go.NewClient[v1.GetStarshipRelationsRequest, v1.GetFilmsResponse](
			httpClient,
			baseURL+FilmResolverServiceGetStarshipFilmsProcedure,
			opts...,
		),
		getVehicleFilms: connect_go.NewClient[v1.GetVehicleRelationsRequest, v1.GetFilmsResponse](
			httpClient,
			baseURL+FilmResolverServiceGetVehicleFilmsProcedure,
			opts...,
		),
	}
}

// filmResolverServiceClient implements FilmResolverServiceClient.
type filmResolverServiceClient struct {
	getPersonFilms   *connect_go.Client[v1.GetPersonRelationsRequest, v1.GetFilmsResponse]
	getSpeciesFilms  *connect_go.Client[v1.GetSpeciesRelationsRequest, v1.GetFilmsResponse]
	getPlanetFilms   *connect_go.Client[v1.GetPlanetRelationsRequest, v1.GetFilmsResponse]
	getStarshipFilms *connect_go.Client[v1.GetStarshipRelationsRequest, v1.GetFilmsResponse]
	getVehicleFilms  *connect_go.Client[v1.GetVehicleRelationsRequest, v1.GetFilmsResponse]
}

// GetPersonFilms calls buf.knit.demo.swapi.relations.v1.FilmResolverService.GetPersonFilms.
func (c *filmResolverServiceClient) GetPersonFilms(ctx context.Context, req *connect_go.Request[v1.GetPersonRelationsRequest]) (*connect_go.Response[v1.GetFilmsResponse], error) {
	return c.getPersonFilms.CallUnary(ctx, req)
}

// GetSpeciesFilms calls buf.knit.demo.swapi.relations.v1.FilmResolverService.GetSpeciesFilms.
func (c *filmResolverServiceClient) GetSpeciesFilms(ctx context.Context, req *connect_go.Request[v1.GetSpeciesRelationsRequest]) (*connect_go.Response[v1.GetFilmsResponse], error) {
	return c.getSpeciesFilms.CallUnary(ctx, req)
}

// GetPlanetFilms calls buf.knit.demo.swapi.relations.v1.FilmResolverService.GetPlanetFilms.
func (c *filmResolverServiceClient) GetPlanetFilms(ctx context.Context, req *connect_go.Request[v1.GetPlanetRelationsRequest]) (*connect_go.Response[v1.GetFilmsResponse], error) {
	return c.getPlanetFilms.CallUnary(ctx, req)
}

// GetStarshipFilms calls buf.knit.demo.swapi.relations.v1.FilmResolverService.GetStarshipFilms.
func (c *filmResolverServiceClient) GetStarshipFilms(ctx context.Context, req *connect_go.Request[v1.GetStarshipRelationsRequest]) (*connect_go.Response[v1.GetFilmsResponse], error) {
	return c.getStarshipFilms.CallUnary(ctx, req)
}

// GetVehicleFilms calls buf.knit.demo.swapi.relations.v1.FilmResolverService.GetVehicleFilms.
func (c *filmResolverServiceClient) GetVehicleFilms(ctx context.Context, req *connect_go.Request[v1.GetVehicleRelationsRequest]) (*connect_go.Response[v1.GetFilmsResponse], error) {
	return c.getVehicleFilms.CallUnary(ctx, req)
}

// FilmResolverServiceHandler is an implementation of the
// buf.knit.demo.swapi.relations.v1.FilmResolverService service.
type FilmResolverServiceHandler interface {
	GetPersonFilms(context.Context, *connect_go.Request[v1.GetPersonRelationsRequest]) (*connect_go.Response[v1.GetFilmsResponse], error)
	GetSpeciesFilms(context.Context, *connect_go.Request[v1.GetSpeciesRelationsRequest]) (*connect_go.Response[v1.GetFilmsResponse], error)
	GetPlanetFilms(context.Context, *connect_go.Request[v1.GetPlanetRelationsRequest]) (*connect_go.Response[v1.GetFilmsResponse], error)
	GetStarshipFilms(context.Context, *connect_go.Request[v1.GetStarshipRelationsRequest]) (*connect_go.Response[v1.GetFilmsResponse], error)
	GetVehicleFilms(context.Context, *connect_go.Request[v1.GetVehicleRelationsRequest]) (*connect_go.Response[v1.GetFilmsResponse], error)
}

// NewFilmResolverServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFilmResolverServiceHandler(svc FilmResolverServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(FilmResolverServiceGetPersonFilmsProcedure, connect_go.NewUnaryHandler(
		FilmResolverServiceGetPersonFilmsProcedure,
		svc.GetPersonFilms,
		opts...,
	))
	mux.Handle(FilmResolverServiceGetSpeciesFilmsProcedure, connect_go.NewUnaryHandler(
		FilmResolverServiceGetSpeciesFilmsProcedure,
		svc.GetSpeciesFilms,
		opts...,
	))
	mux.Handle(FilmResolverServiceGetPlanetFilmsProcedure, connect_go.NewUnaryHandler(
		FilmResolverServiceGetPlanetFilmsProcedure,
		svc.GetPlanetFilms,
		opts...,
	))
	mux.Handle(FilmResolverServiceGetStarshipFilmsProcedure, connect_go.NewUnaryHandler(
		FilmResolverServiceGetStarshipFilmsProcedure,
		svc.GetStarshipFilms,
		opts...,
	))
	mux.Handle(FilmResolverServiceGetVehicleFilmsProcedure, connect_go.NewUnaryHandler(
		FilmResolverServiceGetVehicleFilmsProcedure,
		svc.GetVehicleFilms,
		opts...,
	))
	return "/buf.knit.demo.swapi.relations.v1.FilmResolverService/", mux
}

// UnimplementedFilmResolverServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFilmResolverServiceHandler struct{}

func (UnimplementedFilmResolverServiceHandler) GetPersonFilms(context.Context, *connect_go.Request[v1.GetPersonRelationsRequest]) (*connect_go.Response[v1.GetFilmsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.knit.demo.swapi.relations.v1.FilmResolverService.GetPersonFilms is not implemented"))
}

func (UnimplementedFilmResolverServiceHandler) GetSpeciesFilms(context.Context, *connect_go.Request[v1.GetSpeciesRelationsRequest]) (*connect_go.Response[v1.GetFilmsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.knit.demo.swapi.relations.v1.FilmResolverService.GetSpeciesFilms is not implemented"))
}

func (UnimplementedFilmResolverServiceHandler) GetPlanetFilms(context.Context, *connect_go.Request[v1.GetPlanetRelationsRequest]) (*connect_go.Response[v1.GetFilmsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.knit.demo.swapi.relations.v1.FilmResolverService.GetPlanetFilms is not implemented"))
}

func (UnimplementedFilmResolverServiceHandler) GetStarshipFilms(context.Context, *connect_go.Request[v1.GetStarshipRelationsRequest]) (*connect_go.Response[v1.GetFilmsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.knit.demo.swapi.relations.v1.FilmResolverService.GetStarshipFilms is not implemented"))
}

func (UnimplementedFilmResolverServiceHandler) GetVehicleFilms(context.Context, *connect_go.Request[v1.GetVehicleRelationsRequest]) (*connect_go.Response[v1.GetFilmsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.knit.demo.swapi.relations.v1.FilmResolverService.GetVehicleFilms is not implemented"))
}

// PersonResolverServiceClient is a client for the
// buf.knit.demo.swapi.relations.v1.PersonResolverService service.
type PersonResolverServiceClient interface {
	GetFilmCharacters(context.Context, *connect_go.Request[v1.GetFilmRelationsRequest]) (*connect_go.Response[v1.GetCharactersResponse], error)
	GetSpeciesCharacters(context.Context, *connect_go.Request[v1.GetSpeciesRelationsRequest]) (*connect_go.Response[v1.GetCharactersResponse], error)
	GetPlanetResidents(context.Context, *connect_go.Request[v1.GetPlanetRelationsRequest]) (*connect_go.Response[v1.GetResidentsResponse], error)
	GetStarshipPilots(context.Context, *connect_go.Request[v1.GetStarshipRelationsRequest]) (*connect_go.Response[v1.GetPilotsResponse], error)
	GetVehiclePilots(context.Context, *connect_go.Request[v1.GetVehicleRelationsRequest]) (*connect_go.Response[v1.GetPilotsResponse], error)
}

// NewPersonResolverServiceClient constructs a client for the
// buf.knit.demo.swapi.relations.v1.PersonResolverService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPersonResolverServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PersonResolverServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &personResolverServiceClient{
		getFilmCharacters: connect_go.NewClient[v1.GetFilmRelationsRequest, v1.GetCharactersResponse](
			httpClient,
			baseURL+PersonResolverServiceGetFilmCharactersProcedure,
			opts...,
		),
		getSpeciesCharacters: connect_go.NewClient[v1.GetSpeciesRelationsRequest, v1.GetCharactersResponse](
			httpClient,
			baseURL+PersonResolverServiceGetSpeciesCharactersProcedure,
			opts...,
		),
		getPlanetResidents: connect_go.NewClient[v1.GetPlanetRelationsRequest, v1.GetResidentsResponse](
			httpClient,
			baseURL+PersonResolverServiceGetPlanetResidentsProcedure,
			opts...,
		),
		getStarshipPilots: connect_go.NewClient[v1.GetStarshipRelationsRequest, v1.GetPilotsResponse](
			httpClient,
			baseURL+PersonResolverServiceGetStarshipPilotsProcedure,
			opts...,
		),
		getVehiclePilots: connect_go.NewClient[v1.GetVehicleRelationsRequest, v1.GetPilotsResponse](
			httpClient,
			baseURL+PersonResolverServiceGetVehiclePilotsProcedure,
			opts...,
		),
	}
}

// personResolverServiceClient implements PersonResolverServiceClient.
type personResolverServiceClient struct {
	getFilmCharacters    *connect_go.Client[v1.GetFilmRelationsRequest, v1.GetCharactersResponse]
	getSpeciesCharacters *connect_go.Client[v1.GetSpeciesRelationsRequest, v1.GetCharactersResponse]
	getPlanetResidents   *connect_go.Client[v1.GetPlanetRelationsRequest, v1.GetResidentsResponse]
	getStarshipPilots    *connect_go.Client[v1.GetStarshipRelationsRequest, v1.GetPilotsResponse]
	getVehiclePilots     *connect_go.Client[v1.GetVehicleRelationsRequest, v1.GetPilotsResponse]
}

// GetFilmCharacters calls buf.knit.demo.swapi.relations.v1.PersonResolverService.GetFilmCharacters.
func (c *personResolverServiceClient) GetFilmCharacters(ctx context.Context, req *connect_go.Request[v1.GetFilmRelationsRequest]) (*connect_go.Response[v1.GetCharactersResponse], error) {
	return c.getFilmCharacters.CallUnary(ctx, req)
}

// GetSpeciesCharacters calls
// buf.knit.demo.swapi.relations.v1.PersonResolverService.GetSpeciesCharacters.
func (c *personResolverServiceClient) GetSpeciesCharacters(ctx context.Context, req *connect_go.Request[v1.GetSpeciesRelationsRequest]) (*connect_go.Response[v1.GetCharactersResponse], error) {
	return c.getSpeciesCharacters.CallUnary(ctx, req)
}

// GetPlanetResidents calls
// buf.knit.demo.swapi.relations.v1.PersonResolverService.GetPlanetResidents.
func (c *personResolverServiceClient) GetPlanetResidents(ctx context.Context, req *connect_go.Request[v1.GetPlanetRelationsRequest]) (*connect_go.Response[v1.GetResidentsResponse], error) {
	return c.getPlanetResidents.CallUnary(ctx, req)
}

// GetStarshipPilots calls buf.knit.demo.swapi.relations.v1.PersonResolverService.GetStarshipPilots.
func (c *personResolverServiceClient) GetStarshipPilots(ctx context.Context, req *connect_go.Request[v1.GetStarshipRelationsRequest]) (*connect_go.Response[v1.GetPilotsResponse], error) {
	return c.getStarshipPilots.CallUnary(ctx, req)
}

// GetVehiclePilots calls buf.knit.demo.swapi.relations.v1.PersonResolverService.GetVehiclePilots.
func (c *personResolverServiceClient) GetVehiclePilots(ctx context.Context, req *connect_go.Request[v1.GetVehicleRelationsRequest]) (*connect_go.Response[v1.GetPilotsResponse], error) {
	return c.getVehiclePilots.CallUnary(ctx, req)
}

// PersonResolverServiceHandler is an implementation of the
// buf.knit.demo.swapi.relations.v1.PersonResolverService service.
type PersonResolverServiceHandler interface {
	GetFilmCharacters(context.Context, *connect_go.Request[v1.GetFilmRelationsRequest]) (*connect_go.Response[v1.GetCharactersResponse], error)
	GetSpeciesCharacters(context.Context, *connect_go.Request[v1.GetSpeciesRelationsRequest]) (*connect_go.Response[v1.GetCharactersResponse], error)
	GetPlanetResidents(context.Context, *connect_go.Request[v1.GetPlanetRelationsRequest]) (*connect_go.Response[v1.GetResidentsResponse], error)
	GetStarshipPilots(context.Context, *connect_go.Request[v1.GetStarshipRelationsRequest]) (*connect_go.Response[v1.GetPilotsResponse], error)
	GetVehiclePilots(context.Context, *connect_go.Request[v1.GetVehicleRelationsRequest]) (*connect_go.Response[v1.GetPilotsResponse], error)
}

// NewPersonResolverServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPersonResolverServiceHandler(svc PersonResolverServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(PersonResolverServiceGetFilmCharactersProcedure, connect_go.NewUnaryHandler(
		PersonResolverServiceGetFilmCharactersProcedure,
		svc.GetFilmCharacters,
		opts...,
	))
	mux.Handle(PersonResolverServiceGetSpeciesCharactersProcedure, connect_go.NewUnaryHandler(
		PersonResolverServiceGetSpeciesCharactersProcedure,
		svc.GetSpeciesCharacters,
		opts...,
	))
	mux.Handle(PersonResolverServiceGetPlanetResidentsProcedure, connect_go.NewUnaryHandler(
		PersonResolverServiceGetPlanetResidentsProcedure,
		svc.GetPlanetResidents,
		opts...,
	))
	mux.Handle(PersonResolverServiceGetStarshipPilotsProcedure, connect_go.NewUnaryHandler(
		PersonResolverServiceGetStarshipPilotsProcedure,
		svc.GetStarshipPilots,
		opts...,
	))
	mux.Handle(PersonResolverServiceGetVehiclePilotsProcedure, connect_go.NewUnaryHandler(
		PersonResolverServiceGetVehiclePilotsProcedure,
		svc.GetVehiclePilots,
		opts...,
	))
	return "/buf.knit.demo.swapi.relations.v1.PersonResolverService/", mux
}

// UnimplementedPersonResolverServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPersonResolverServiceHandler struct{}

func (UnimplementedPersonResolverServiceHandler) GetFilmCharacters(context.Context, *connect_go.Request[v1.GetFilmRelationsRequest]) (*connect_go.Response[v1.GetCharactersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.knit.demo.swapi.relations.v1.PersonResolverService.GetFilmCharacters is not implemented"))
}

func (UnimplementedPersonResolverServiceHandler) GetSpeciesCharacters(context.Context, *connect_go.Request[v1.GetSpeciesRelationsRequest]) (*connect_go.Response[v1.GetCharactersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.knit.demo.swapi.relations.v1.PersonResolverService.GetSpeciesCharacters is not implemented"))
}

func (UnimplementedPersonResolverServiceHandler) GetPlanetResidents(context.Context, *connect_go.Request[v1.GetPlanetRelationsRequest]) (*connect_go.Response[v1.GetResidentsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.knit.demo.swapi.relations.v1.PersonResolverService.GetPlanetResidents is not implemented"))
}

func (UnimplementedPersonResolverServiceHandler) GetStarshipPilots(context.Context, *connect_go.Request[v1.GetStarshipRelationsRequest]) (*connect_go.Response[v1.GetPilotsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.knit.demo.swapi.relations.v1.PersonResolverService.GetStarshipPilots is not implemented"))
}

func (UnimplementedPersonResolverServiceHandler) GetVehiclePilots(context.Context, *connect_go.Request[v1.GetVehicleRelationsRequest]) (*connect_go.Response[v1.GetPilotsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.knit.demo.swapi.relations.v1.PersonResolverService.GetVehiclePilots is not implemented"))
}

// PlanetResolverServiceClient is a client for the
// buf.knit.demo.swapi.relations.v1.PlanetResolverService service.
type PlanetResolverServiceClient interface {
	GetFilmPlanets(context.Context, *connect_go.Request[v1.GetFilmRelationsRequest]) (*connect_go.Response[v1.GetPlanetsResponse], error)
	GetPersonHomeworld(context.Context, *connect_go.Request[v1.GetPersonRelationRequest]) (*connect_go.Response[v1.GetHomeworldResponse], error)
	GetSpeciesHomeworld(context.Context, *connect_go.Request[v1.GetSpeciesRelationRequest]) (*connect_go.Response[v1.GetHomeworldResponse], error)
}

// NewPlanetResolverServiceClient constructs a client for the
// buf.knit.demo.swapi.relations.v1.PlanetResolverService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPlanetResolverServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PlanetResolverServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &planetResolverServiceClient{
		getFilmPlanets: connect_go.NewClient[v1.GetFilmRelationsRequest, v1.GetPlanetsResponse](
			httpClient,
			baseURL+PlanetResolverServiceGetFilmPlanetsProcedure,
			opts...,
		),
		getPersonHomeworld: connect_go.NewClient[v1.GetPersonRelationRequest, v1.GetHomeworldResponse](
			httpClient,
			baseURL+PlanetResolverServiceGetPersonHomeworldProcedure,
			opts...,
		),
		getSpeciesHomeworld: connect_go.NewClient[v1.GetSpeciesRelationRequest, v1.GetHomeworldResponse](
			httpClient,
			baseURL+PlanetResolverServiceGetSpeciesHomeworldProcedure,
			opts...,
		),
	}
}

// planetResolverServiceClient implements PlanetResolverServiceClient.
type planetResolverServiceClient struct {
	getFilmPlanets      *connect_go.Client[v1.GetFilmRelationsRequest, v1.GetPlanetsResponse]
	getPersonHomeworld  *connect_go.Client[v1.GetPersonRelationRequest, v1.GetHomeworldResponse]
	getSpeciesHomeworld *connect_go.Client[v1.GetSpeciesRelationRequest, v1.GetHomeworldResponse]
}

// GetFilmPlanets calls buf.knit.demo.swapi.relations.v1.PlanetResolverService.GetFilmPlanets.
func (c *planetResolverServiceClient) GetFilmPlanets(ctx context.Context, req *connect_go.Request[v1.GetFilmRelationsRequest]) (*connect_go.Response[v1.GetPlanetsResponse], error) {
	return c.getFilmPlanets.CallUnary(ctx, req)
}

// GetPersonHomeworld calls
// buf.knit.demo.swapi.relations.v1.PlanetResolverService.GetPersonHomeworld.
func (c *planetResolverServiceClient) GetPersonHomeworld(ctx context.Context, req *connect_go.Request[v1.GetPersonRelationRequest]) (*connect_go.Response[v1.GetHomeworldResponse], error) {
	return c.getPersonHomeworld.CallUnary(ctx, req)
}

// GetSpeciesHomeworld calls
// buf.knit.demo.swapi.relations.v1.PlanetResolverService.GetSpeciesHomeworld.
func (c *planetResolverServiceClient) GetSpeciesHomeworld(ctx context.Context, req *connect_go.Request[v1.GetSpeciesRelationRequest]) (*connect_go.Response[v1.GetHomeworldResponse], error) {
	return c.getSpeciesHomeworld.CallUnary(ctx, req)
}

// PlanetResolverServiceHandler is an implementation of the
// buf.knit.demo.swapi.relations.v1.PlanetResolverService service.
type PlanetResolverServiceHandler interface {
	GetFilmPlanets(context.Context, *connect_go.Request[v1.GetFilmRelationsRequest]) (*connect_go.Response[v1.GetPlanetsResponse], error)
	GetPersonHomeworld(context.Context, *connect_go.Request[v1.GetPersonRelationRequest]) (*connect_go.Response[v1.GetHomeworldResponse], error)
	GetSpeciesHomeworld(context.Context, *connect_go.Request[v1.GetSpeciesRelationRequest]) (*connect_go.Response[v1.GetHomeworldResponse], error)
}

// NewPlanetResolverServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPlanetResolverServiceHandler(svc PlanetResolverServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(PlanetResolverServiceGetFilmPlanetsProcedure, connect_go.NewUnaryHandler(
		PlanetResolverServiceGetFilmPlanetsProcedure,
		svc.GetFilmPlanets,
		opts...,
	))
	mux.Handle(PlanetResolverServiceGetPersonHomeworldProcedure, connect_go.NewUnaryHandler(
		PlanetResolverServiceGetPersonHomeworldProcedure,
		svc.GetPersonHomeworld,
		opts...,
	))
	mux.Handle(PlanetResolverServiceGetSpeciesHomeworldProcedure, connect_go.NewUnaryHandler(
		PlanetResolverServiceGetSpeciesHomeworldProcedure,
		svc.GetSpeciesHomeworld,
		opts...,
	))
	return "/buf.knit.demo.swapi.relations.v1.PlanetResolverService/", mux
}

// UnimplementedPlanetResolverServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPlanetResolverServiceHandler struct{}

func (UnimplementedPlanetResolverServiceHandler) GetFilmPlanets(context.Context, *connect_go.Request[v1.GetFilmRelationsRequest]) (*connect_go.Response[v1.GetPlanetsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.knit.demo.swapi.relations.v1.PlanetResolverService.GetFilmPlanets is not implemented"))
}

func (UnimplementedPlanetResolverServiceHandler) GetPersonHomeworld(context.Context, *connect_go.Request[v1.GetPersonRelationRequest]) (*connect_go.Response[v1.GetHomeworldResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.knit.demo.swapi.relations.v1.PlanetResolverService.GetPersonHomeworld is not implemented"))
}

func (UnimplementedPlanetResolverServiceHandler) GetSpeciesHomeworld(context.Context, *connect_go.Request[v1.GetSpeciesRelationRequest]) (*connect_go.Response[v1.GetHomeworldResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.knit.demo.swapi.relations.v1.PlanetResolverService.GetSpeciesHomeworld is not implemented"))
}

// SpeciesResolverServiceClient is a client for the
// buf.knit.demo.swapi.relations.v1.SpeciesResolverService service.
type SpeciesResolverServiceClient interface {
	GetFilmSpecies(context.Context, *connect_go.Request[v1.GetFilmRelationsRequest]) (*connect_go.Response[v1.GetSpeciesResponse], error)
	GetPersonSpecies(context.Context, *connect_go.Request[v1.GetPersonRelationsRequest]) (*connect_go.Response[v1.GetSpeciesResponse], error)
}

// NewSpeciesResolverServiceClient constructs a client for the
// buf.knit.demo.swapi.relations.v1.SpeciesResolverService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSpeciesResolverServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SpeciesResolverServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &speciesResolverServiceClient{
		getFilmSpecies: connect_go.NewClient[v1.GetFilmRelationsRequest, v1.GetSpeciesResponse](
			httpClient,
			baseURL+SpeciesResolverServiceGetFilmSpeciesProcedure,
			opts...,
		),
		getPersonSpecies: connect_go.NewClient[v1.GetPersonRelationsRequest, v1.GetSpeciesResponse](
			httpClient,
			baseURL+SpeciesResolverServiceGetPersonSpeciesProcedure,
			opts...,
		),
	}
}

// speciesResolverServiceClient implements SpeciesResolverServiceClient.
type speciesResolverServiceClient struct {
	getFilmSpecies   *connect_go.Client[v1.GetFilmRelationsRequest, v1.GetSpeciesResponse]
	getPersonSpecies *connect_go.Client[v1.GetPersonRelationsRequest, v1.GetSpeciesResponse]
}

// GetFilmSpecies calls buf.knit.demo.swapi.relations.v1.SpeciesResolverService.GetFilmSpecies.
func (c *speciesResolverServiceClient) GetFilmSpecies(ctx context.Context, req *connect_go.Request[v1.GetFilmRelationsRequest]) (*connect_go.Response[v1.GetSpeciesResponse], error) {
	return c.getFilmSpecies.CallUnary(ctx, req)
}

// GetPersonSpecies calls buf.knit.demo.swapi.relations.v1.SpeciesResolverService.GetPersonSpecies.
func (c *speciesResolverServiceClient) GetPersonSpecies(ctx context.Context, req *connect_go.Request[v1.GetPersonRelationsRequest]) (*connect_go.Response[v1.GetSpeciesResponse], error) {
	return c.getPersonSpecies.CallUnary(ctx, req)
}

// SpeciesResolverServiceHandler is an implementation of the
// buf.knit.demo.swapi.relations.v1.SpeciesResolverService service.
type SpeciesResolverServiceHandler interface {
	GetFilmSpecies(context.Context, *connect_go.Request[v1.GetFilmRelationsRequest]) (*connect_go.Response[v1.GetSpeciesResponse], error)
	GetPersonSpecies(context.Context, *connect_go.Request[v1.GetPersonRelationsRequest]) (*connect_go.Response[v1.GetSpeciesResponse], error)
}

// NewSpeciesResolverServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSpeciesResolverServiceHandler(svc SpeciesResolverServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(SpeciesResolverServiceGetFilmSpeciesProcedure, connect_go.NewUnaryHandler(
		SpeciesResolverServiceGetFilmSpeciesProcedure,
		svc.GetFilmSpecies,
		opts...,
	))
	mux.Handle(SpeciesResolverServiceGetPersonSpeciesProcedure, connect_go.NewUnaryHandler(
		SpeciesResolverServiceGetPersonSpeciesProcedure,
		svc.GetPersonSpecies,
		opts...,
	))
	return "/buf.knit.demo.swapi.relations.v1.SpeciesResolverService/", mux
}

// UnimplementedSpeciesResolverServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSpeciesResolverServiceHandler struct{}

func (UnimplementedSpeciesResolverServiceHandler) GetFilmSpecies(context.Context, *connect_go.Request[v1.GetFilmRelationsRequest]) (*connect_go.Response[v1.GetSpeciesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.knit.demo.swapi.relations.v1.SpeciesResolverService.GetFilmSpecies is not implemented"))
}

func (UnimplementedSpeciesResolverServiceHandler) GetPersonSpecies(context.Context, *connect_go.Request[v1.GetPersonRelationsRequest]) (*connect_go.Response[v1.GetSpeciesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.knit.demo.swapi.relations.v1.SpeciesResolverService.GetPersonSpecies is not implemented"))
}

// StarshipResolverServiceClient is a client for the
// buf.knit.demo.swapi.relations.v1.StarshipResolverService service.
type StarshipResolverServiceClient interface {
	GetFilmStarships(context.Context, *connect_go.Request[v1.GetFilmRelationsRequest]) (*connect_go.Response[v1.GetStarshipsResponse], error)
	GetPersonStarships(context.Context, *connect_go.Request[v1.GetPersonRelationsRequest]) (*connect_go.Response[v1.GetStarshipsResponse], error)
}

// NewStarshipResolverServiceClient constructs a client for the
// buf.knit.demo.swapi.relations.v1.StarshipResolverService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStarshipResolverServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) StarshipResolverServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &starshipResolverServiceClient{
		getFilmStarships: connect_go.NewClient[v1.GetFilmRelationsRequest, v1.GetStarshipsResponse](
			httpClient,
			baseURL+StarshipResolverServiceGetFilmStarshipsProcedure,
			opts...,
		),
		getPersonStarships: connect_go.NewClient[v1.GetPersonRelationsRequest, v1.GetStarshipsResponse](
			httpClient,
			baseURL+StarshipResolverServiceGetPersonStarshipsProcedure,
			opts...,
		),
	}
}

// starshipResolverServiceClient implements StarshipResolverServiceClient.
type starshipResolverServiceClient struct {
	getFilmStarships   *connect_go.Client[v1.GetFilmRelationsRequest, v1.GetStarshipsResponse]
	getPersonStarships *connect_go.Client[v1.GetPersonRelationsRequest, v1.GetStarshipsResponse]
}

// GetFilmStarships calls buf.knit.demo.swapi.relations.v1.StarshipResolverService.GetFilmStarships.
func (c *starshipResolverServiceClient) GetFilmStarships(ctx context.Context, req *connect_go.Request[v1.GetFilmRelationsRequest]) (*connect_go.Response[v1.GetStarshipsResponse], error) {
	return c.getFilmStarships.CallUnary(ctx, req)
}

// GetPersonStarships calls
// buf.knit.demo.swapi.relations.v1.StarshipResolverService.GetPersonStarships.
func (c *starshipResolverServiceClient) GetPersonStarships(ctx context.Context, req *connect_go.Request[v1.GetPersonRelationsRequest]) (*connect_go.Response[v1.GetStarshipsResponse], error) {
	return c.getPersonStarships.CallUnary(ctx, req)
}

// StarshipResolverServiceHandler is an implementation of the
// buf.knit.demo.swapi.relations.v1.StarshipResolverService service.
type StarshipResolverServiceHandler interface {
	GetFilmStarships(context.Context, *connect_go.Request[v1.GetFilmRelationsRequest]) (*connect_go.Response[v1.GetStarshipsResponse], error)
	GetPersonStarships(context.Context, *connect_go.Request[v1.GetPersonRelationsRequest]) (*connect_go.Response[v1.GetStarshipsResponse], error)
}

// NewStarshipResolverServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStarshipResolverServiceHandler(svc StarshipResolverServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(StarshipResolverServiceGetFilmStarshipsProcedure, connect_go.NewUnaryHandler(
		StarshipResolverServiceGetFilmStarshipsProcedure,
		svc.GetFilmStarships,
		opts...,
	))
	mux.Handle(StarshipResolverServiceGetPersonStarshipsProcedure, connect_go.NewUnaryHandler(
		StarshipResolverServiceGetPersonStarshipsProcedure,
		svc.GetPersonStarships,
		opts...,
	))
	return "/buf.knit.demo.swapi.relations.v1.StarshipResolverService/", mux
}

// UnimplementedStarshipResolverServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStarshipResolverServiceHandler struct{}

func (UnimplementedStarshipResolverServiceHandler) GetFilmStarships(context.Context, *connect_go.Request[v1.GetFilmRelationsRequest]) (*connect_go.Response[v1.GetStarshipsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.knit.demo.swapi.relations.v1.StarshipResolverService.GetFilmStarships is not implemented"))
}

func (UnimplementedStarshipResolverServiceHandler) GetPersonStarships(context.Context, *connect_go.Request[v1.GetPersonRelationsRequest]) (*connect_go.Response[v1.GetStarshipsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.knit.demo.swapi.relations.v1.StarshipResolverService.GetPersonStarships is not implemented"))
}

// VehicleResolverServiceClient is a client for the
// buf.knit.demo.swapi.relations.v1.VehicleResolverService service.
type VehicleResolverServiceClient interface {
	GetFilmVehicles(context.Context, *connect_go.Request[v1.GetFilmRelationsRequest]) (*connect_go.Response[v1.GetVehiclesResponse], error)
	GetPersonVehicles(context.Context, *connect_go.Request[v1.GetPersonRelationsRequest]) (*connect_go.Response[v1.GetVehiclesResponse], error)
}

// NewVehicleResolverServiceClient constructs a client for the
// buf.knit.demo.swapi.relations.v1.VehicleResolverService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVehicleResolverServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) VehicleResolverServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &vehicleResolverServiceClient{
		getFilmVehicles: connect_go.NewClient[v1.GetFilmRelationsRequest, v1.GetVehiclesResponse](
			httpClient,
			baseURL+VehicleResolverServiceGetFilmVehiclesProcedure,
			opts...,
		),
		getPersonVehicles: connect_go.NewClient[v1.GetPersonRelationsRequest, v1.GetVehiclesResponse](
			httpClient,
			baseURL+VehicleResolverServiceGetPersonVehiclesProcedure,
			opts...,
		),
	}
}

// vehicleResolverServiceClient implements VehicleResolverServiceClient.
type vehicleResolverServiceClient struct {
	getFilmVehicles   *connect_go.Client[v1.GetFilmRelationsRequest, v1.GetVehiclesResponse]
	getPersonVehicles *connect_go.Client[v1.GetPersonRelationsRequest, v1.GetVehiclesResponse]
}

// GetFilmVehicles calls buf.knit.demo.swapi.relations.v1.VehicleResolverService.GetFilmVehicles.
func (c *vehicleResolverServiceClient) GetFilmVehicles(ctx context.Context, req *connect_go.Request[v1.GetFilmRelationsRequest]) (*connect_go.Response[v1.GetVehiclesResponse], error) {
	return c.getFilmVehicles.CallUnary(ctx, req)
}

// GetPersonVehicles calls
// buf.knit.demo.swapi.relations.v1.VehicleResolverService.GetPersonVehicles.
func (c *vehicleResolverServiceClient) GetPersonVehicles(ctx context.Context, req *connect_go.Request[v1.GetPersonRelationsRequest]) (*connect_go.Response[v1.GetVehiclesResponse], error) {
	return c.getPersonVehicles.CallUnary(ctx, req)
}

// VehicleResolverServiceHandler is an implementation of the
// buf.knit.demo.swapi.relations.v1.VehicleResolverService service.
type VehicleResolverServiceHandler interface {
	GetFilmVehicles(context.Context, *connect_go.Request[v1.GetFilmRelationsRequest]) (*connect_go.Response[v1.GetVehiclesResponse], error)
	GetPersonVehicles(context.Context, *connect_go.Request[v1.GetPersonRelationsRequest]) (*connect_go.Response[v1.GetVehiclesResponse], error)
}

// NewVehicleResolverServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVehicleResolverServiceHandler(svc VehicleResolverServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(VehicleResolverServiceGetFilmVehiclesProcedure, connect_go.NewUnaryHandler(
		VehicleResolverServiceGetFilmVehiclesProcedure,
		svc.GetFilmVehicles,
		opts...,
	))
	mux.Handle(VehicleResolverServiceGetPersonVehiclesProcedure, connect_go.NewUnaryHandler(
		VehicleResolverServiceGetPersonVehiclesProcedure,
		svc.GetPersonVehicles,
		opts...,
	))
	return "/buf.knit.demo.swapi.relations.v1.VehicleResolverService/", mux
}

// UnimplementedVehicleResolverServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVehicleResolverServiceHandler struct{}

func (UnimplementedVehicleResolverServiceHandler) GetFilmVehicles(context.Context, *connect_go.Request[v1.GetFilmRelationsRequest]) (*connect_go.Response[v1.GetVehiclesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.knit.demo.swapi.relations.v1.VehicleResolverService.GetFilmVehicles is not implemented"))
}

func (UnimplementedVehicleResolverServiceHandler) GetPersonVehicles(context.Context, *connect_go.Request[v1.GetPersonRelationsRequest]) (*connect_go.Response[v1.GetVehiclesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.knit.demo.swapi.relations.v1.VehicleResolverService.GetPersonVehicles is not implemented"))
}
